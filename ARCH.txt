CirrusAV Architecture
-Client/Server architecture
-Server runs the anti-virus software
-Client responsible for uploading files

Supported Use Cases
-Request to scan a local file
-Request to scan portions of the system
-Request to scan a file on the Internet and provide a clean download
-Request to scan a new file in a watched directory

Communication
-Need to think up a protocol to use. Serialized classes like in SPOOFS? Or a RESTful API? Hmm.
-Types of communication:
request scan of file(s)
request scan of url
send scan results for file
send OK to send files

Flagging Program
-AntiVirus interface class
-Different types of AntiVirus programs implement it
-API:
boolean scan(String filename)

Server
-Waits for a request to have a file scanned. On receiving a request (which includes number of files to be scanned), sends OK, then waits for the files to be sent. As each file is received, start up a small scanning job in background? Maybe process several files at once? Not too sure yet.
-Needs to send back some information/status of file scan results of a file. Client can then take care of what to do afterwards.
-Has a handler for listening to a port for communication from client?

Client
-Need to request a scan of a file or files, on receiving OK, send files in chunks.
-Waits to get info on the status of files. Will this mean keeping track of which files are being scanned??
-A daemon that can have multiple clients (command line or GUI)?

Class Hierarchy:
cirrus
    common
    client
        Client.java
    server
        Server.java
        Flagger.java
        AntiVirus.java
--
